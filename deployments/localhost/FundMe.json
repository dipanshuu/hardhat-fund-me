{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "funder",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getVersion",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0x54cf39d76b55dd357797165f8c0b0bc0c253f14dcf948f1917692774903c2824",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "1042018",
        "logsBloom": "0x
        "blockHash": "0xd6d2d1d4401eeb4a46aa934c3dc5a3407da77302db7d608b9fbc6e4a1c887d84",
        "transactionHash": "0x54cf39d76b55dd357797165f8c0b0bc0c253f14dcf948f1917692774903c2824",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "1042018",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
    "numDeployments": 1,
    "solcInputHash": "107dbd03c712f52d65e733dc91045037",
    "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Deepanshu Singh\",\"details\":\"this implements price feeds as our  library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"THis contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//Pragma\\npragma solidity ^0.8.8;\\n\\n//Imports\\n// import \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n//Error Codes\\nerror FundMe__NotOwner();\\n\\n//Interfaces,Libraries,Contracts\\n/** @title A contract for crowd funding\\n * @author Deepanshu Singh\\n * @notice THis contract is to demo a sample funding contract\\n * @dev this implements price feeds as our  library\\n */\\ncontract FundMe {\\n    //Type Declarations\\n    using PriceConverter for uint256;\\n\\n    //State variables\\n\\n    mapping(address => uint256) private addressToAmountFunded;\\n    address[] private funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n    AggregatorV3Interface private priceFeed;\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        addressToAmountFunded[msg.sender] += msg.value;\\n        funders.push(msg.sender);\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        // ETH/USD price feed address of Goerli Network.\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        );\\n        return priceFeed.version();\\n    }\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    //Function Order:\\n    //constructor\\n    //receive\\n    //fallback\\n    //external\\n    //public\\n    //internal\\n    //private\\n    //view/pure\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return addressToAmountFunded[funder];\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = funders;\\n        //mapping can't be in memory,sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return priceFeed;\\n    }\\n\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\\\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback()\\n    //     /   \\\\\\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\",\"keccak256\":\"0x8c8ddd4672430afe8f453e7641dde83a72123e81a1d606fa45b47b7be746c9d9\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Goerli ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // );\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x0676976ccb830a568e54007955ec4577f467c2424290fa921884db97dcee2ae1\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012f9380380620012f9833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c61117a6200017f600039600081816104230152818161067201526106c2015261117a6000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461014d5780639e87a5cd14610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101c457610099565b80630343fb25146100a35780630d8e6e2c146100e05780633ccfd60b1461010b5780636b69a5921461012257610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610a85565b61033b565b6040516100d79190610acb565b60405180910390f35b3480156100ec57600080fd5b506100f5610383565b6040516101029190610acb565b60405180910390f35b34801561011757600080fd5b50610120610421565b005b34801561012e57600080fd5b50610137610661565b6040516101449190610acb565b60405180910390f35b34801561015957600080fd5b5061016261066e565b60405161016f9190610af5565b60405180910390f35b34801561018457600080fd5b5061018d610696565b60405161019a9190610b6f565b60405180910390f35b6101ab610201565b005b3480156101b957600080fd5b506101c26106c0565b005b3480156101d057600080fd5b506101eb60048036038101906101e69190610bb6565b610857565b6040516101f89190610af5565b60405180910390f35b6802b5e3af16b1880000610240600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461089f90919063ffffffff16565b1015610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610c40565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102cf9190610c8f565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073d4a33860578de61dbabdc8bfdb98fd742fa7028e90508073ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103e357600080fd5b505afa1580156103f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041b9190610cfa565b91505090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104a6576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610551576000600182815481106104cc576104cb610d27565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061054990610d56565b9150506104a9565b50600067ffffffffffffffff81111561056d5761056c610d9f565b5b60405190808252806020026020018201604052801561059b5781602001602082028036833780820191505090505b50600190805190602001906105b192919061097b565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105d890610dff565b60006040518083038185875af1925050503d8060008114610615576040519150601f19603f3d011682016040523d82523d6000602084013e61061a565b606091505b505090508061065e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065590610e60565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610745576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107c957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161077f575b5050505050905060005b81518110156108535760008282815181106107f1576107f0610d27565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061084b90610d56565b9150506107d3565b5050565b60006001828154811061086d5761086c610d27565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108ab836108db565b90506000670de0b6b3a764000085836108c49190610e80565b6108ce9190610f09565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561092457600080fd5b505afa158015610938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c9190610fb2565b5050509150506402540be40081610973919061102d565b915050919050565b8280548282559060005260206000209081019282156109f4579160200282015b828111156109f35782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061099b565b5b509050610a019190610a05565b5090565b5b80821115610a1e576000816000905550600101610a06565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a5282610a27565b9050919050565b610a6281610a47565b8114610a6d57600080fd5b50565b600081359050610a7f81610a59565b92915050565b600060208284031215610a9b57610a9a610a22565b5b6000610aa984828501610a70565b91505092915050565b6000819050919050565b610ac581610ab2565b82525050565b6000602082019050610ae06000830184610abc565b92915050565b610aef81610a47565b82525050565b6000602082019050610b0a6000830184610ae6565b92915050565b6000819050919050565b6000610b35610b30610b2b84610a27565b610b10565b610a27565b9050919050565b6000610b4782610b1a565b9050919050565b6000610b5982610b3c565b9050919050565b610b6981610b4e565b82525050565b6000602082019050610b846000830184610b60565b92915050565b610b9381610ab2565b8114610b9e57600080fd5b50565b600081359050610bb081610b8a565b92915050565b600060208284031215610bcc57610bcb610a22565b5b6000610bda84828501610ba1565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c2a601b83610be3565b9150610c3582610bf4565b602082019050919050565b60006020820190508181036000830152610c5981610c1d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c9a82610ab2565b9150610ca583610ab2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cda57610cd9610c60565b5b828201905092915050565b600081519050610cf481610b8a565b92915050565b600060208284031215610d1057610d0f610a22565b5b6000610d1e84828501610ce5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d6182610ab2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9457610d93610c60565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610de9600083610dce565b9150610df482610dd9565b600082019050919050565b6000610e0a82610ddc565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e4a600b83610be3565b9150610e5582610e14565b602082019050919050565b60006020820190508181036000830152610e7981610e3d565b9050919050565b6000610e8b82610ab2565b9150610e9683610ab2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ecf57610ece610c60565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f1482610ab2565b9150610f1f83610ab2565b925082610f2f57610f2e610eda565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f5981610f3a565b8114610f6457600080fd5b50565b600081519050610f7681610f50565b92915050565b6000819050919050565b610f8f81610f7c565b8114610f9a57600080fd5b50565b600081519050610fac81610f86565b92915050565b600080600080600060a08688031215610fce57610fcd610a22565b5b6000610fdc88828901610f67565b9550506020610fed88828901610f9d565b9450506040610ffe88828901610ce5565b935050606061100f88828901610ce5565b925050608061102088828901610f67565b9150509295509295909350565b600061103882610f7c565b915061104383610f7c565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561108257611081610c60565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110bf576110be610c60565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110fc576110fb610c60565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561113957611138610c60565b5b82820290509291505056fea2646970667358221220db69fa8a6e0a561f5780a67e86ca2216c611f2081c2320ff8f2ce43d1a8abcf064736f6c63430008080033",
    "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461014d5780639e87a5cd14610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101c457610099565b80630343fb25146100a35780630d8e6e2c146100e05780633ccfd60b1461010b5780636b69a5921461012257610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610a85565b61033b565b6040516100d79190610acb565b60405180910390f35b3480156100ec57600080fd5b506100f5610383565b6040516101029190610acb565b60405180910390f35b34801561011757600080fd5b50610120610421565b005b34801561012e57600080fd5b50610137610661565b6040516101449190610acb565b60405180910390f35b34801561015957600080fd5b5061016261066e565b60405161016f9190610af5565b60405180910390f35b34801561018457600080fd5b5061018d610696565b60405161019a9190610b6f565b60405180910390f35b6101ab610201565b005b3480156101b957600080fd5b506101c26106c0565b005b3480156101d057600080fd5b506101eb60048036038101906101e69190610bb6565b610857565b6040516101f89190610af5565b60405180910390f35b6802b5e3af16b1880000610240600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461089f90919063ffffffff16565b1015610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610c40565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102cf9190610c8f565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073d4a33860578de61dbabdc8bfdb98fd742fa7028e90508073ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103e357600080fd5b505afa1580156103f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041b9190610cfa565b91505090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104a6576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610551576000600182815481106104cc576104cb610d27565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061054990610d56565b9150506104a9565b50600067ffffffffffffffff81111561056d5761056c610d9f565b5b60405190808252806020026020018201604052801561059b5781602001602082028036833780820191505090505b50600190805190602001906105b192919061097b565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105d890610dff565b60006040518083038185875af1925050503d8060008114610615576040519150601f19603f3d011682016040523d82523d6000602084013e61061a565b606091505b505090508061065e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065590610e60565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610745576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107c957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161077f575b5050505050905060005b81518110156108535760008282815181106107f1576107f0610d27565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061084b90610d56565b9150506107d3565b5050565b60006001828154811061086d5761086c610d27565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108ab836108db565b90506000670de0b6b3a764000085836108c49190610e80565b6108ce9190610f09565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561092457600080fd5b505afa158015610938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c9190610fb2565b5050509150506402540be40081610973919061102d565b915050919050565b8280548282559060005260206000209081019282156109f4579160200282015b828111156109f35782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061099b565b5b509050610a019190610a05565b5090565b5b80821115610a1e576000816000905550600101610a06565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a5282610a27565b9050919050565b610a6281610a47565b8114610a6d57600080fd5b50565b600081359050610a7f81610a59565b92915050565b600060208284031215610a9b57610a9a610a22565b5b6000610aa984828501610a70565b91505092915050565b6000819050919050565b610ac581610ab2565b82525050565b6000602082019050610ae06000830184610abc565b92915050565b610aef81610a47565b82525050565b6000602082019050610b0a6000830184610ae6565b92915050565b6000819050919050565b6000610b35610b30610b2b84610a27565b610b10565b610a27565b9050919050565b6000610b4782610b1a565b9050919050565b6000610b5982610b3c565b9050919050565b610b6981610b4e565b82525050565b6000602082019050610b846000830184610b60565b92915050565b610b9381610ab2565b8114610b9e57600080fd5b50565b600081359050610bb081610b8a565b92915050565b600060208284031215610bcc57610bcb610a22565b5b6000610bda84828501610ba1565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c2a601b83610be3565b9150610c3582610bf4565b602082019050919050565b60006020820190508181036000830152610c5981610c1d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c9a82610ab2565b9150610ca583610ab2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cda57610cd9610c60565b5b828201905092915050565b600081519050610cf481610b8a565b92915050565b600060208284031215610d1057610d0f610a22565b5b6000610d1e84828501610ce5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d6182610ab2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d9457610d93610c60565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610de9600083610dce565b9150610df482610dd9565b600082019050919050565b6000610e0a82610ddc565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e4a600b83610be3565b9150610e5582610e14565b602082019050919050565b60006020820190508181036000830152610e7981610e3d565b9050919050565b6000610e8b82610ab2565b9150610e9683610ab2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ecf57610ece610c60565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f1482610ab2565b9150610f1f83610ab2565b925082610f2f57610f2e610eda565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f5981610f3a565b8114610f6457600080fd5b50565b600081519050610f7681610f50565b92915050565b6000819050919050565b610f8f81610f7c565b8114610f9a57600080fd5b50565b600081519050610fac81610f86565b92915050565b600080600080600060a08688031215610fce57610fcd610a22565b5b6000610fdc88828901610f67565b9550506020610fed88828901610f9d565b9450506040610ffe88828901610ce5565b935050606061100f88828901610ce5565b925050608061102088828901610f67565b9150509295509295909350565b600061103882610f7c565b915061104383610f7c565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561108257611081610c60565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110bf576110be610c60565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110fc576110fb610c60565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561113957611138610c60565b5b82820290509291505056fea2646970667358221220db69fa8a6e0a561f5780a67e86ca2216c611f2081c2320ff8f2ce43d1a8abcf064736f6c63430008080033",
    "devdoc": {
        "author": "Deepanshu Singh",
        "details": "this implements price feeds as our  library",
        "kind": "dev",
        "methods": {},
        "title": "A contract for crowd funding",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {},
        "notice": "THis contract is to demo a sample funding contract",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 58,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "addressToAmountFunded",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 61,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "funders",
                "offset": 0,
                "slot": "1",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 73,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
